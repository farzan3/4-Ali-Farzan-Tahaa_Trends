version: '3.8'

services:
  hunter-web:
    build: .
    ports:
      - "8501:8501"
    environment:
      - DATABASE_URL=sqlite:///data/hunter_app.db
      - JWT_SECRET=${JWT_SECRET:-change-this-secret-key}
      - SCRAPER_DELAY=1.0
      - USE_PROXY=false
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - hunter-api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  hunter-api:
    build: .
    command: ["uvicorn", "api.main:app", "--host", "0.0.0.0", "--port", "8000"]
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=sqlite:///data/hunter_app.db
      - JWT_SECRET=${JWT_SECRET:-change-this-secret-key}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: PostgreSQL for production
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=hunter_db
      - POSTGRES_USER=hunter_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-hunter_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    profiles:
      - production

  # Optional: Redis for caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    restart: unless-stopped
    profiles:
      - production

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - hunter-web
      - hunter-api
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:

networks:
  default:
    name: hunter-network